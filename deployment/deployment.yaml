---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jobs-api-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: privileged-psp
subjects:
- kind: ServiceAccount
  name: jobs-api
  namespace: jobs-api
---
# https://github.com/kubernetes/ingress-nginx
apiVersion: v1
kind: Namespace
metadata:
  name: jobs-api
  labels:
    # we need this label to bypass the ingress-admission controller
    name: jobs-api
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-jobs"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-jobs
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-jobs
      app.kubernetes.io/part-of: ingress-nginx-jobs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-jobs
        app.kubernetes.io/part-of: ingress-nginx-jobs
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: jobs-api
      # affinity and taints, only schedule pods in ingress nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: kubernetes.io/role
                    operator: In
                    values:
                      - ingressgen2
      tolerations:
        - key: "ingressgen2"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      containers:
        - name: nginx-ingress-controller
          image: docker-registry.tools.wmflabs.org/nginx-ingress-controller:v0.46.0
          args:
            - /nginx-ingress-controller
            - --https-port=30001
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-jobs-api
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=jobs
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          resources:
            requests:
              cpu: "0.5"
              memory: "1Gi"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 30001
            - name: metrics
              containerPort: 10254
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10

---
# from https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30001
      port: 30001
      targetPort: 30001
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
# the jobs-api itself
apiVersion: v1
kind: Service
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    name: jobs-api
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  replicas: 2
  selector:
    matchLabels:
      name: jobs-api
  template:
    metadata:
      labels:
        name: jobs-api
    spec:
      serviceAccountName: jobs-api
      volumes:
      - name: home
        hostPath:
          path: /data/project
          type: Directory
      - name: wmcs-project
        hostPath:
          path: /etc/wmcs-project
          type: File
      - name: sssd-pipes
        hostPath:
          path: /var/lib/sss/pipes
          type: Directory
      containers:
        - name: webservice
          image: docker-registry.tools.wmflabs.org/toolforge-jobs-framework-api:latest
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          volumeMounts:
          - mountPath: /data/project
            name: home
          - mountPath: /etc/wmcs-project
            name: wmcs-project
            readOnly: true
          - mountPath: /var/lib/sss/pipes
            name: sssd-pipes
---
