---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jobs-api-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: privileged-psp
subjects:
- kind: ServiceAccount
  name: jobs-api
  namespace: jobs-api
---
# https://github.com/kubernetes/ingress-nginx
apiVersion: v1
kind: Namespace
metadata:
  name: jobs-api
  labels:
    # we need this label to bypass the ingress-admission controller
    name: jobs-api
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
data:
  error-log-level: info
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-jobs"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-jobs
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-jobs
      app.kubernetes.io/part-of: ingress-nginx-jobs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-jobs
        app.kubernetes.io/part-of: ingress-nginx-jobs
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: jobs-api
      # affinity and taints, only schedule pods in ingress nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: kubernetes.io/role
                    operator: In
                    values:
                      - ingress
      tolerations:
        - key: "ingress"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      containers:
        - name: nginx-ingress-controller
          image: docker-registry.tools.wmflabs.org/nginx-ingress-controller:v0.46.0
          args:
            - /nginx-ingress-controller
            - --https-port=30001
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-jobs-api
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=jobs
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          resources:
            requests:
              cpu: "0.5"
              memory: "1Gi"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 30001
            - name: metrics
              containerPort: 10254
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10

---
# from https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30001
      port: 30001
      targetPort: 30001
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
# the jobs-api itself
apiVersion: v1
kind: Service
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    name: jobs-api
  type: ClusterIP
---
# kubectl -n jobs-api create secret generic k8s-ca-secret --from-file=ca.crt=/etc/kubernetes/pki/ca.crt
# - or from current .kube/config in case of kind:
# kubectl config view --raw -o json | jq -r '.clusters[0].cluster."certificate-authority-data"' | tr -d '"' | base64 --decode | base64 -w0
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: k8s-ca-secret
  namespace: jobs-api
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EVXlOVEUxTWpnMU9Gb1hEVE14TURVeU16RTFNamcxT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmVPCmQwYUdtR2Y3YW1MS05kcm1pY1BvQXNtZjlkMmhFVEM2cURMVm5CK295TnJZV3lUMkkvdmI3RzNMbENYbmpvSGIKQlJlUEtFLzFhQlRQc0FaaUxTRFl6eC8ySmUyVDdSdUpvaElkcjRTUTRiVHcxOUhMOXM3V0I4ZUN6TTFuS0xWbwpVRTRFckZpVmZ0OU5qMGMzdzZ6MW5tUkdaeFE0TmFWSWc5dE9QVExNa1FuVHM5ZVMxWmFyZFNnT1hGbm9lbUorCjVHWVo5SHRvcVRKRXE3RldrWFpGcUJIenYvNmFreEpMSmZMNkx3VXVNTzBBSEJkWmx6eUNZUkJ6ZWM5NENPQUQKMWVDdGZqd0wvdkU0WG92WWw1c0ljVEpDeFJMMVZIRkVFeEQrUDZsaDJtcnpYTHJUQjU5ZzUxcE9YREs5QlhKNAo1VmVwdERxTWt6ZUhlMDNMVS9VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZMeHZrcGIzcFQ3TGRtckFrTVBSR1JIYlpPMHRNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDbCtnVnNtMmxKNWlnMWRQbjUxRFcxQXQ1djVjWHkyZGJ2cGMzcXU1eklOZFBpK3krUgpZckpRSmhIN0FiY2pUQzFXMFhVL01LTG5LUTljaXVPMWsvV1Mza05nSVdhczJhWkV6Mm1VVytra2hsaWpvQkNZCkdpeTFXaDNyVFZNVUFTaElNUkN0OXlrNEV2aFFubkw2M3draEVLS2xsemtPc1RQMVNDS0huSENWazhDTWdkYUUKWTh5R3E3MFdmb3gycUN2ZDNSWkJMM2ZaTzg3djZhM2lQVHZRQjYzeUNJeE5VcUpaUExueG8ydXFzQW03ZFRWQQpzSkZwT3UzaEhMUFVVNmJPR0ZxRFZDOGlobHVNVng5Mm9WZVE0TXJDd0VodnF5akYvVEIrYllIZktqMnZUZFBICjIvcDJQQXF0NjkrMno5S3YvQWxnZ2hzWG9id1lrRW9pODlzMAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# generated using modules/kubeadm/files/admin_scripts/wmcs-k8s-get-cert.sh jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
# and then kubectl -n jobs-api create secret tls jobs-api-server-cert --key /tmp/xxx/server-key.pem --cert /tmp/xxx/server-cert.pem
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: jobs-api-server-cert
  namespace: jobs-api
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIekNDQXdlZ0F3SUJBZ0lSQU1waWdEQ0lrNER6VzlVdklzc0pXckV3RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBMU1qVXhOVE14TVRaYUZ3MHlNakExTWpVeApOVE14TVRaYU1EUXhNakF3QmdOVkJBTVRLV3B2WW5NdWMzWmpMblJ2YjJ4elltVjBZUzVsY1dsaFpERXVkMmxyCmFXMWxaR2xoTG1Oc2IzVmtNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXkza3EKRHhRNjAwQzZDZ3Q4cmJPWnB0K1ZuRFgwaml6K0RHdmtpVStGMzN4REZsb2lhdUxQaUdzT1JYLzFQdmF4Q0t2aAoxNEMza0hDYTROUVhxNmV0ZXJ4ZkpyMC84TXlNdk1oSzhUSHFmbjJIN1pSQkRPTWZkK0ZmbWNCZHpoVmovNWl0Cll2Vi9RdHRISzB2L2JHZUZITTh3bkpZZUd4b2tPUFQ2cjZLOVViNTVVZ0dIdHVpUWRYdzQ0NnpZYXBYQVN4Q04KdzhFcmhvbDhyNjBmaDVvbkJRNXBkdThaT29EOUdxZ05WL1FXbG5VQkYxaWVERG9Rc1hOdjBONTJQT1oxaTZGMApxc1FISjFuNllGNW1aczIxVzVvNkR3V3EyTkwySE83TGpBTWJGQzNKUG15R2dCeTROUXlHcndySE90aHEybVdLClNkTzBqRnNTdUIwWS9FK3Fvd0lEQVFBQm80SUJTVENDQVVVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWQpNQmFBRkx4dmtwYjNwVDdMZG1yQWtNUFJHUkhiWk8wdE1JSGtCZ05WSFJFRWdkd3dnZG1DS1dwdlluTXVjM1pqCkxuUnZiMnh6WW1WMFlTNWxjV2xoWkRFdWQybHJhVzFsWkdsaExtTnNiM1ZrZ2xOcWIySnpMbk4yWXk1MGIyOXMKYzJKbGRHRXVaWEZwWVdReExuZHBhMmx0WldScFlTNWpiRzkxWkM1cWIySnpMbk4yWXk1MGIyOXNjMkpsZEdFdQpaWEZwWVdReExuZHBhMmx0WldScFlTNWpiRzkxWklKWGFtOWljeTV6ZG1NdWRHOXZiSE5pWlhSaExtVnhhV0ZrCk1TNTNhV3RwYldWa2FXRXVZMnh2ZFdRdWFtOWljeTV6ZG1NdWRHOXZiSE5pWlhSaExtVnhhV0ZrTVM1M2FXdHAKYldWa2FXRXVZMnh2ZFdRdWMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNjcWFHaks3bURLWHB2OXdGYQpsYXdORi9icG40YlEvYVB3bUxla25IbEdVZENwVWdGL1N5OWVjS1RrVTBBYS9HQ2xmRDYwRTJIV25QZ0JLaEVjCjM1Z2ZvNGlGc015RWJ1RnZXWjd0WnpSeFlXY2FSUmxjL1A2cGZScnJGR3o2NjJjMjFsMTNxMmJmcHF5Z0RsWWMKbXpSRkpDdlZiWGc1dTQ2R1J0UjR2RDJrL0Z3dUNpbDJDNVUvaytOMXNNaklrcEwzY3g3Z28wTXdQWXJPQXozZQprOEUxWU9RZWJSY0ZUMjY1YlhUbVRzQkE3bGJzZm9zUmREYkhMYVJDVWoyRlNJMGJMSTZDSi9EdEhQbEtIQ2M1ClBCZFRrWlJOVU8vTHVOakN5ZEw5WmtzTjlwVVhmWTJKT09VLzVtdkdmdnRmUkxJR0tpT0EvQW9JK0Jlc01PNVAKdWNSSAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeTNrcUR4UTYwMEM2Q2d0OHJiT1pwdCtWbkRYMGppeitER3ZraVUrRjMzeERGbG9pCmF1TFBpR3NPUlgvMVB2YXhDS3ZoMTRDM2tIQ2E0TlFYcTZldGVyeGZKcjAvOE15TXZNaEs4VEhxZm4ySDdaUkIKRE9NZmQrRmZtY0JkemhWai81aXRZdlYvUXR0SEswdi9iR2VGSE04d25KWWVHeG9rT1BUNnI2SzlVYjU1VWdHSAp0dWlRZFh3NDQ2ellhcFhBU3hDTnc4RXJob2w4cjYwZmg1b25CUTVwZHU4Wk9vRDlHcWdOVi9RV2xuVUJGMWllCkREb1FzWE52ME41MlBPWjFpNkYwcXNRSEoxbjZZRjVtWnMyMVc1bzZEd1dxMk5MMkhPN0xqQU1iRkMzSlBteUcKZ0J5NE5ReUdyd3JIT3RocTJtV0tTZE8wakZzU3VCMFkvRStxb3dJREFRQUJBb0lCQVFDeWRKODl3R2xqZEtaMgpQdUxuMmRoT01sU2VQL2d3WmllZXIxWXVVOCsvVmRYbEdjS0w2a2RJaDFScUFqTVBPUC9GOGpKT2R2Y0lPS3F0CnUzYlROMm9BZG93aGh1UTRocjU4cUZLS1BsUkRBa2dnUitIUnNyV2J4OCs0SXE1akhBR3JYN1hhVUNTQWQ1OXcKeXVQSHFQZG5jQlJia1pId0JUcDF0ZTdUOGpDSEtxNE9PckZIWDBFWVRtMXBIZXR1bkYwWDltem9lK1VyekpTZQpJL1QvUEdnNGFoNmxzWGhxd2F2aVZhQ3o1WXU5SmhjQmpjQytQTlh5MzdNOFk4L2FReGNZWmc2bEoycW11UFRtCktzb0NTQ0pQZVRhdE5hWHllQXVFdjlKNGNWUm8wSjVlRUM0N2NRWVRUajU3cXFjcDBjbVlTQXNYb1hrSHlpcU4KU3B2N25EOEpBb0dCQU9jL3FaMkpiSDJnVHo0V3VRVDlkSVJVUVM3Tm9UTmpUYjZ0d29xWXk5cUFGNDNFb216cwpPUTBxZ2pFazcvK3dtR05jNzlVRWN4UURrTG1uVGRzNitoRUpsMGgvd3N5WXgvWktXaFZKdkEraGNjZGY4ekhRClh3enBKeUJIVDBBSDFzUmg1VmJGZ3c3cXl3cWxjM1NmK2todnVLRGhCQzZBRWpCSS92MjlYWXNWQW9HQkFPRkEKY1AzcGhHMUR2M1VoZGpzUVdXSjJGOGdLVkFTWGdXRkdzWjMyMjBWU3BlL1M5RWx5dm02bUQ2UFZoNU4vc0JxcAp6bjdTT2djaU05NUV1Qzl5cWFlLzBESjhxMTZHY3NtZjl6K2xPdG51a291MlhKREZjT0RDUHlIZ1dKRVhtbnYrClBJZlFPekIrSENkWlRmdVNOYkcrZ0lUaE11VFZKVkhEZjZPVWgyelhBb0dBUTlRcGxUclU1cmhaNWZWV1NiOXEKS05KcDJDZWFpKzhwdzY5RjY4OUxwQWlFWUNINEhvamZaeHc3MmR4aXhSWHdiTnk2d0RtdzQ0TDBOWEI4WnJ5UwowdUtFVEZDbE84dm9nelpsMis2bnlkSHFCTGdCSm5CZklQTldkYUpVL1l3UEU4VS9Oc2R5WExMRDRaaU1GLzVBCnRIU0lyQyswUVV0eGlsWXU3UkJaV3MwQ2dZQUhDRG4rMDFGOUQ4WmtZNzBMTHdGN1gzQnlvRS9yTE1ldlA4Ty8KeUxzanVPYlJTK2F3ZkZLUnBjR0xQZGxUczRMTjhrc3VEbVlkWHVYN3BHMlRuYUxLUitTNkRzWlMxeU95UTdvMgpWSFEzNVlqUnI4bklBMEg0NGxlU09Tektxcy81MndBTXhXVnpxQnc4NWo3WEFjT0hYd2tvSE5lMzZTZVhHK0ZhClBBTFdWUUtCZ0R6bUJ0ODlTSk1uL0l3REw1bmc1aTFNMFNpUWFlY1Y2Q1Iwa1FZWUVFMVpwalkrZFl4b3Z0OUoKNGhGWFBUYXpnYUhCNVNHaTRTRWdnRnNYK1NQMVIrZ09XVGR5YXN4QS9NMTdOQ3E1cHRZbGN2RG9LSjdwamZTUQpzZzNPUFpNeHYvaXZpd0N3ODU0Zk9BR1h5THpPanNvamlidHRwanhXSks0czBFR0p5UVVJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# from https://kubernetes.github.io/ingress-nginx/examples/auth/client-certs/
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: jobs-api
  namespace: jobs-api
  annotations:
    # Enable client certificate authentication
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    # Create the secret containing the trusted ca certificates
    # # this was created using: kubectl create secret generic k8s-ca-secret --from-file=ca.crt=/etc/kubernetes/pki/ca.crt
    nginx.ingress.kubernetes.io/auth-tls-secret: "jobs-api/k8s-ca-secret"
    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    # special ingress
    kubernetes.io/ingress.class: "jobs"
spec:
  tls:
    - hosts:
        - jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
      secretName: jobs-api-server-cert
  rules:
  - host: jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
    http:
      paths:
      - backend:
          serviceName: jobs-api
          servicePort: 8080
        path: /
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  replicas: 1
  selector:
    matchLabels:
      name: jobs-api
  template:
    metadata:
      labels:
        name: jobs-api
    spec:
      serviceAccountName: jobs-api
      volumes:
      - name: home
        hostPath:
          path: /data/project
          type: Directory
      - name: wmcs-project
        hostPath:
          path: /etc/wmcs-project
          type: File
      - name: sssd-pipes
        hostPath:
          path: /var/lib/sss/pipes
          type: Directory
      containers:
        - name: jobs-api
          image: jobs-api:latest
          # kind works this way
          # https://iximiuz.com/en/posts/kubernetes-kind-load-docker-image/
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          volumeMounts:
          - mountPath: /data/project
            name: home
          - mountPath: /etc/wmcs-project
            name: wmcs-project
            readOnly: true
          - mountPath: /var/lib/sss/pipes
            name: sssd-pipes
---
