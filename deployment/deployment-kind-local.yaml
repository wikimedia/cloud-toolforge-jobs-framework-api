---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jobs-api-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: privileged-psp
subjects:
- kind: ServiceAccount
  name: jobs-api
  namespace: jobs-api
---
# https://github.com/kubernetes/ingress-nginx
apiVersion: v1
kind: Namespace
metadata:
  name: jobs-api
  labels:
    # we need this label to bypass the ingress-admission controller
    name: jobs-api
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
data:
  error-log-level: info
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-jobs"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jobs-api
subjects:
  - kind: ServiceAccount
    name: jobs-api
    namespace: jobs-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-jobs
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-jobs
      app.kubernetes.io/part-of: ingress-nginx-jobs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-jobs
        app.kubernetes.io/part-of: ingress-nginx-jobs
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: jobs-api
      # affinity and taints, only schedule pods in ingress nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: kubernetes.io/role
                    operator: In
                    values:
                      - ingress
      tolerations:
        - key: "ingress"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      containers:
        - name: nginx-ingress-controller
          image: docker-registry.tools.wmflabs.org/nginx-ingress-controller:v0.46.0
          args:
            - /nginx-ingress-controller
            - --https-port=30001
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-jobs-api
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=jobs
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 101
          resources:
            requests:
              cpu: "0.5"
              memory: "1Gi"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 30001
            - name: metrics
              containerPort: 10254
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10

---
# from https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-jobs-api
  namespace: jobs-api
  labels:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30001
      port: 30001
      targetPort: 30001
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx-jobs
    app.kubernetes.io/part-of: ingress-nginx-jobs
---
# the jobs-api itself
apiVersion: v1
kind: Service
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    name: jobs-api
  type: ClusterIP
---
# kubectl -n jobs-api create secret generic k8s-ca-secret --from-file=ca.crt=/etc/kubernetes/pki/ca.crt
# - or from current .kube/config in case of kind:
# kubectl config view --raw -o json | jq -r '.clusters[0].cluster."certificate-authority-data"' | tr -d '"' | base64 --decode | base64 -w0
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: k8s-ca-secret
  namespace: jobs-api
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1EVXhPVEV6TWpZME0xb1hEVE14TURVeE56RXpNalkwTTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTEN1CkxpQWtCNmd1Nzl6NnRmYjRKR2F5QmN3NC9RLzVSSUxVdlVVM2hxZVY4VEhJWHVWRk5CNmdWRkxJSWZSbzNjcnYKUlE4eEhwa2pDTWh0MThVNnh2SUN3bHp6M214Z04vd0xPTHZ6Wm5ZbFJrNkJSdzF5bjB2bEhmcDFMWCtVWlUyMQp3N201THl6L1plbFkzeHNQWDExZ3RUSlhPQXFxT1VUNllnMzljd1ZtYVkrSGV1UmY2dG05Q2VtNGlocGtDcENkCjNKUGZrZVJVaVNmQkcxUEVoU2RrSHFabkxDUHhrZzY3RDNJWXpZZkJGTTVDWWQ2U1ZJVU9JalBjRSs1TUVNWFYKZzdNYkppQkV3bVVJQlI1a3ozM3B5WUpMTHZ5RmpFZUZWYUh0OXRVZy83UGtDalc3TW0zSUFvekVxZFhudXZMWQpidUZsdG1rQTVIc2R3OFZGN0swQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZGVHlEYk1jNS9wSnNVM3g0QUduTjJqbHBCOXpNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCZEVXeHpGMTJIS0lWdUt0Qzk1MFU1cVB0QWczbk8vNWYrdGVkYnBQQ2NuYmhsY1Y4MQpESFJyVVQ4aDA5c2ExWm8wOTRXQjRvcVBkM1E5REZxZEV3WHNEUlBNVDlLaVhhRG4yQUhuTitmYi9tOE53Y2NhCldESHB6K3JkYm9RYlBpYnllVDlRamtidHpLcENHSHdNdGFUb1ovSUJOK1RGeTgwdS9xQ3hmZEpyTmY4UC81QnIKYXRVZW9TRDZYckZLekJSU1BONmNIdE0rdFZranVySEpHd0tUdDk4M09ZOHJoWm90a1pNUEtVOHRvd3NxZnR6SApYTklJMmtMZHdOSzY5c1hKc3ZTV3JYT21hUDRVMGszaWtzV2RlVUM0WUMrbyt1dGZ2NFluV2ppUFIxc1YzM0w3CndIa0tteitCcUJvT1pxWlRlMTFXbGRCVUxkSEEyL3g3R2RPUQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# generated using modules/kubeadm/files/admin_scripts/wmcs-k8s-get-cert.sh jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
# and then kubectl -n jobs-api create secret tls jobs-api-server-cert --key /tmp/xxx/server-key.pem --cert /tmp/xxx/server-cert.pem
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: jobs-api-server-cert
  namespace: jobs-api
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIekNDQXdlZ0F3SUJBZ0lSQVBnM0tIbnFnTUVPYXA1SnhleTl3TkV3RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TVRBMU1qUXhOak00TVRsYUZ3MHlNakExTWpReApOak00TVRsYU1EUXhNakF3QmdOVkJBTVRLV3B2WW5NdWMzWmpMblJ2YjJ4elltVjBZUzVsY1dsaFpERXVkMmxyCmFXMWxaR2xoTG1Oc2IzVmtNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpUN2kKYzVLalN6alBKelp3c1BsU3J6bGpxS0JMa2Q1bzlWbk9ZS3gxNm1lakV3S0xNMTh4UWI3bEY1U0lIWkxnbVZsaQo4TTBNVWhVRHVwV2dLME85WndWU1ZVT3REak9xbmsvTlJLYmFwOE1Ba01QZEpOc081ZDVqSUYvd3hZWHE5VUtoCmxXRW50cmg4R255Wlh6RFg1Ym9sTmVGQmtXd3BCcnBDaWl5c3MxdE1iTWg0d1JNMFZlZmR5M2FzRHNZS0tzcXMKL1Y4dGx2cXpkSzd3OG1VRERjcmNrZXRMSXZRQTl6OUYxQmNZZ1EvZnhucHRxRzQyR1RGeDd0UjlSUEpaeURkUwo0b3BCS2Q5cjJUZDhvMXdOb2xCb1JScDF2VmR4bnBsRFJncTNoK0VpaXlzNkxBN0ZPcEFXc2lQejFIM1M1dUxECjFUdlpPUDl0WGZqQzhhT0NRd0lEQVFBQm80SUJTVENDQVVVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWQpNQmFBRkZUeURiTWM1L3BKc1UzeDRBR25OMmpscEI5ek1JSGtCZ05WSFJFRWdkd3dnZG1DS1dwdlluTXVjM1pqCkxuUnZiMnh6WW1WMFlTNWxjV2xoWkRFdWQybHJhVzFsWkdsaExtTnNiM1ZrZ2xOcWIySnpMbk4yWXk1MGIyOXMKYzJKbGRHRXVaWEZwWVdReExuZHBhMmx0WldScFlTNWpiRzkxWkM1cWIySnpMbk4yWXk1MGIyOXNjMkpsZEdFdQpaWEZwWVdReExuZHBhMmx0WldScFlTNWpiRzkxWklKWGFtOWljeTV6ZG1NdWRHOXZiSE5pWlhSaExtVnhhV0ZrCk1TNTNhV3RwYldWa2FXRXVZMnh2ZFdRdWFtOWljeTV6ZG1NdWRHOXZiSE5pWlhSaExtVnhhV0ZrTVM1M2FXdHAKYldWa2FXRXVZMnh2ZFdRdWMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUE3UFRZUnphUk41aUw1a0huTQplS1k3V25CYTRkU3BlMk8xL3E3MG5yYXYrZldtWGp0OS9oZW54WXFueERMTk1kM016VkF6a1Z5VzhHcjlUTEtrCkljbk01Zm1EdzZ1WlY3N0EvU3ZmWmxCUk1tN2N2L3ltU0xodnRDbGxldnhjTWV3T2dQd0kwdjQxb1ZlMTZCa00KUUVqWGZ0bHNUNWVwRXp2NTZBRlZtaDRYZkRGNWJWVGI5TVdaSnBveUUxNi8vQm82a0NwUjRhcXcvM2dQYUp2QwpxWUNtd2RnSGJ4aktRcmw2SU5CcVNqKzllbnVQUFkyZHZWMndRVUV5RENKSFFjWHQzS3lNeHFGQzFsaG9wTkkvCisyeFNZU21EU1dDYTdRNGJjdFhVejBpaTA4andGS0drQlNnTDJzcHM1S29jRWRxK2VpQUlEQXJ2SVVUZnFmYzEKN0htbQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBelQ3aWM1S2pTempQSnpad3NQbFNyemxqcUtCTGtkNW85Vm5PWUt4MTZtZWpFd0tMCk0xOHhRYjdsRjVTSUhaTGdtVmxpOE0wTVVoVUR1cFdnSzBPOVp3VlNWVU90RGpPcW5rL05SS2JhcDhNQWtNUGQKSk5zTzVkNWpJRi93eFlYcTlVS2hsV0VudHJoOEdueVpYekRYNWJvbE5lRkJrV3dwQnJwQ2lpeXNzMXRNYk1oNAp3Uk0wVmVmZHkzYXNEc1lLS3Nxcy9WOHRsdnF6ZEs3dzhtVUREY3Jja2V0TEl2UUE5ejlGMUJjWWdRL2Z4bnB0CnFHNDJHVEZ4N3RSOVJQSlp5RGRTNG9wQktkOXIyVGQ4bzF3Tm9sQm9SUnAxdlZkeG5wbERSZ3EzaCtFaWl5czYKTEE3Rk9wQVdzaVB6MUgzUzV1TEQxVHZaT1A5dFhmakM4YU9DUXdJREFRQUJBb0lCQVFESWZxbVA1S3NIakZNdwpKd29tbHllaWJCbGlYRlAyQnFIWkt3VmpncFVkaW1mTzVpazg0YnlvVU9aU0JwS0E4VDNlRDJlTGU0S1JuRjJzCkl3WDN2WkNEMXJyNjk4VlJuajhKcjBNQjBVeS9uTW9zb0dpaTNDck5lbFN6QjRXWUxwMjdRSC9BQU14ZXZoRGQKZnVJRUR4NllGeUxLWTJVOXZiN0dCNldBZk91bnQ4SFF3bVhFSHBuZGY5NU9iL0x0MWNQS0RFN3dDdXRtTENpcgpOMS9yNFdGZ2I5NHdhSy9ZTmFod3JCV0oxY2xiK0plSGczZE5KZThPRHcwNHg1ODVRMzZmM0l6ZFlHZTUrblUrCkIwN0RUQWJVcnVSTCtXRmxFSXNjUC9CUW9yV2dKbjMzN0RVVGV5WWJQZURUVUkrSFRhM0s5b3IwcHZHS29YMWwKSWZoWmFtV0JBb0dCQVA0dFY3V2NuZkJHWEN3N2pvc0dITkVxL2dZU3l4YjJLSkR3dXlSTjhFZmtMMjFmVjN0KwpuQW5DRm1xa0Y5TnFlNDlHYWVkdHRnbk04ZWQxMUVqeXNiUSsxMlRCNE9tanY2ZDRwZmxNTFlwSzdPUkNqSXdCCnI3bkxIenltS1g5NnFqM21qUk9RYjR4RHRwSHovenl1Y3JSUGV6cWFtUlBrVU1MMEdYTFNRSlJ4QW9HQkFNNjMKdEw4MnJNYk5yL1I5ODR0RDk3eFJwVHlFSTVrSDlWZ3VZUUF1YUZ5b0kzNUx0Y1I1VDZFeGRuQnB4aGRKbUhtagprOVVBbHJIWEU0NjZYbmFCVElnSFJsRzhtNURYS1hxcm1VaVFnenJsckdLTmoyazhRMkYzUk8rclhqb1NVUDBPCnlLMXlieFpUVlRVbGwvS3kwNXpLRjF5R3QybGVoZWtLSE44dk1jdnpBb0dCQU45NTFGVDhONnpxMzkyUUc1ckcKTEE0SDQ4SkpRY0NWZTBNOE5QNE5mSVpvN1A0WHhwM3d5cGFWekFuRTdxSFdUSDdESlJmeVVRdzY0akZrV3RvcwpiK3VQR09nZ3duUUpvZGRINzMzSjZYeGV0ZnRYTzZWWlVqeGpoN3BXU2NRb2dJZmVMZ21XZzB6cXVCbUpVczd5CmZpMWtlRzhsUUJQS09PdS9uS1Jra1oweEFvR0FjaGRNUi9qYU5VTlM2T01YSnZjVlpUZSt0ZjdNVXVya2k0M1YKZGE4blpIUmNXcGxZc2g2dVIyNHdTMnpscXZhd2svb25Ybmxic3IzZENucHNKb1hJZ285WlRVV0dxdE5HRG5GbApRWHFaSTBtZDhpcmxTeFM2cjdHUE42UmlkalNqeEhlRFpNOXk1bVNKODdKVEFkMlhFOE1xVDZQKzJNWVZySUFyClhUY0VDZWNDZ1lFQW0yRWpvTUVjeTNBSFgxUUVVc2NKKzJrSVVwUkQvYVpJbjMyNFBnRzlLNC82d2I3K2trWFgKTm1ud2hRUGJOS2MxUXhJNWxPbjFQaGYyRGVVQm1IOVp6NllrQzZOeTd0ekMzaXFUajlPWFRNWm9ncnNvNDZEQgp3cWEzQjI4L0tBZ2I3VVZEUWhTVU1FVXNZcjF6bFY3YjY3TW85NzVXK09aZ3l5Qklmb0JyTjdZPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# from https://kubernetes.github.io/ingress-nginx/examples/auth/client-certs/
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: jobs-api
  namespace: jobs-api
  annotations:
    # Enable client certificate authentication
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    # Create the secret containing the trusted ca certificates
    # # this was created using: kubectl create secret generic k8s-ca-secret --from-file=ca.crt=/etc/kubernetes/pki/ca.crt
    nginx.ingress.kubernetes.io/auth-tls-secret: "jobs-api/k8s-ca-secret"
    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    # special ingress
    kubernetes.io/ingress.class: "jobs"
spec:
  tls:
    - hosts:
        - jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
      secretName: jobs-api-server-cert
  rules:
  - host: jobs.svc.toolsbeta.eqiad1.wikimedia.cloud
    http:
      paths:
      - backend:
          serviceName: jobs-api
          servicePort: 8080
        path: /
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobs-api
  namespace: jobs-api
  labels:
    name: jobs-api
spec:
  replicas: 1
  selector:
    matchLabels:
      name: jobs-api
  template:
    metadata:
      labels:
        name: jobs-api
    spec:
      serviceAccountName: jobs-api
#      volumes:
#      - name: home
#        hostPath:
#          path: /data/project
#          type: Directory
#      - name: wmcs-project
#        hostPath:
#          path: /etc/wmcs-project
#          type: File
#      - name: sssd-pipes
#        hostPath:
#          path: /var/lib/sss/pipes
#          type: Directory
      containers:
        - name: jobs-api
          image: jobs-api:latest
          # kind works this way
          # https://iximiuz.com/en/posts/kubernetes-kind-load-docker-image/
          imagePullPolicy: Never
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
#          volumeMounts:
#          - mountPath: /data/project
#            name: home
#          - mountPath: /etc/wmcs-project
#            name: wmcs-project
#            readOnly: true
#          - mountPath: /var/lib/sss/pipes
#            name: sssd-pipes
---
