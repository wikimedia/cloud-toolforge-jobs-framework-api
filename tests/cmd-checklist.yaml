---
- envvars:
    - CURL_URL: "https://jobs.svc.toolsbeta.eqiad1.wikimedia.cloud:30001/api/v1"
      CURL_HDR: "Host:jobs.svc.toolsbeta.eqiad1.wikimedia.cloud"
      CURL_ARGS: "--cert /data/project/test/.toolskube/client.crt --key /data/project/test/.toolskube/client.key --resolve jobs.svc.toolsbeta.eqiad1.wikimedia.cloud:30001:127.0.0.1 -k"
      JOBNAME: "normaljob"
      SLEEP_CMD: ./sleep40.sh
      CRONJOBNAME: "cronjob"
      CONTJOBNAME: "continuousjob"
      IMG: "tf-bullseye-std"
      SLEEP: "5"
      KUBECTL_ARGS: -n tool-test
      LOG_JOB: logjob
      LOG_JOB_CMD: log.sh
      TOOLHOME: /data/project/test
---
- name: "list images"
  tests:
    - cmd: curl -s ${CURL_URL}/images/ -H "${CURL_HDR}" ${CURL_ARGS} | grep -q shortname
      retcode: 0
      stdout: ""
      stderr: ""
    - cmd: curl -s ${CURL_URL}/images/ -H "${CURL_HDR}" ${CURL_ARGS} | grep -q image
      retcode: 0
      stdout: ""
      stderr: ""

- name: "flush everything"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/flush/ -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    - cmd: rm -f ${TOOLHOME}/${LOG_JOB_CMD}
      retcode: 0
    - cmd: rm -f ${TOOLHOME}/${LOG_JOB}*
      retcode: 0

#
# job name validation
#
- name: invalid job names aren't allowed when running a new job
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=./wrongname" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -f
      retcode: 22
      stdout: ""
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=wrong_name" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -f
      retcode: 22
      stdout: ""
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=wrongname@" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -f
      retcode: 22
      stdout: ""
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=Wrongname" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -f
      retcode: 22
      stdout: ""
      stderr: ""

- name: when deleting a job with an invalid name, it is ignored
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/wrong.name -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/wrong_name -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""

- name: can't show a job with an invalid name
  tests:
    - cmd: curl -s ${CURL_URL}/show/invalid_name -H "${CURL_HDR}" ${CURL_ARGS} -f
      retcode: 22
      stdout: ""
      stderr: ""
    - cmd: curl -s ${CURL_URL}/show/invalid.name -H "${CURL_HDR}" ${CURL_ARGS} -f
      retcode: 22
      stdout: ""
      stderr: ""

#
# normal job
#

- name: "create normal job"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""

- name: "create duplicated normal job should fail"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -f
      # the server returns 500 (because k8s returns 409) and curl returns 22
      retcode: 22
      stdout: ""
      stderr: ""

- name: "show normal job, all fields are present"
  tests:
    - cmd: |
            response=$(curl -s ${CURL_URL}/show/${JOBNAME} -H "${CURL_HDR}" ${CURL_ARGS})
            echo "$response" | grep -q '"name": "${JOBNAME}"' \
            && echo "$response" | grep -q '"cmd": "${SLEEP_CMD}"' \
            && echo "$response" | grep -q '"image": "${IMG}"' \
            && echo "$response" | grep -q '"user": "test"' \
            && echo "$response" | grep -q '"filelog": "False"' \
            && echo "$response" | grep -q '"namespace": "tool-test"' \
            && echo "$response" | grep -q "status_short" \
            && echo "$response" | grep -q "status_long" \
            && echo "$response" | grep -q '"emails": "none"'
      retcode: 0
      stdout: ""
      stderr: ""

- name: "list jobs, only normal job is present"
  tests:
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | grep status_short | wc -l
      retcode: 0
      stdout: "1"
      stderr: ""

- name: "delete normal job"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${JOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "show normal job should fail because we just deleted it"
  tests:
    - cmd: curl -s ${CURL_URL}/show/${JOBNAME} -H "${CURL_HDR}" ${CURL_ARGS} -f
      # this means the server returned 404
      retcode: 22
      stdout: ""
      stderr: ""

- name: "create 2 normal jobs"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}2" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "namespace" | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""

- name: delete 2 normal jobs one by one
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${JOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "namespace" | wc -l
      retcode: 0
      stdout: "1"
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${JOBNAME}2" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""

#
# cronjobs
#

- name: "create cronjob"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -d "schedule=*/10 * * * *"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "create duplicated cronjob should fail"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -d "schedule=*/10 * * * *" -f
      # the server returns 500 (because k8s returns 409) and curl returns 22
      retcode: 22
      stdout: ""
      stderr: ""

- name: "create cronjob with wrong schedule should fail"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}" -d "schedule=wrong" -f
      # the server returns 422 (because k8s returns 422) and curl returns 22
      retcode: 22
      stdout: ""
      stderr: ""

- name: "show cronjob, all fields are present"
  tests:
    - cmd: |
            response=$(curl -s ${CURL_URL}/show/${CRONJOBNAME} -H "${CURL_HDR}" ${CURL_ARGS})
            echo "$response" | grep -q '"name": "${CRONJOBNAME}"' \
            && echo "$response" | grep -q '"cmd": "${SLEEP_CMD}"' \
            && echo "$response" | grep -q '"image": "${IMG}"' \
            && echo "$response" | grep -q '"user": "test"' \
            && echo "$response" | grep -q '"filelog": "False"' \
            && echo "$response" | grep -q '"namespace": "tool-test"' \
            && echo "$response" | grep -q "status_short" \
            && echo "$response" | grep -q "status_long" \
            && echo "$response" | grep -q '"emails": "none"' \
            && echo "$response" | grep -F -q '"schedule": "*/10 * * * *"'
      retcode: 0
      stdout: ""
      stderr: ""

- name: "list jobs, only cronjob is present"
  tests:
    # trailing echo helps with stdout comparision
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp
      retcode: 0
      stdout: >-
       [
          {
             "cmd" : "./sleep40.sh",
             "emails" : "none",
             "filelog" : "False",
             "image" : "tf-bullseye-std",
             "name" : "cronjob",
             "namespace" : "tool-test",
             "schedule" : "*/10 * * * *",
             "status_long" : "No pods were created for this job.",
             "status_short" : "Last schedule time: unknown",
             "user" : "test"
          }
       ]
      stderr: ""

- name: "delete cronjob job"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CRONJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "show cronjob should fail because we just deleted it"
  tests:
    - cmd: curl -s ${CURL_URL}/show/${CRONJOBNAME} -H "${CURL_HDR}" ${CURL_ARGS} -f
      # this means the server returned 404
      retcode: 22
      stdout: ""
      stderr: ""

- name: "create 2 cronjobs jobs and delete one by one"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "schedule=*/10 * * * *"
      retcode: 0
      stdout: "201"
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}2" -d "imagename=${IMG}" -d "cmd=true" -d "schedule=*/9 * * * *"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "schedule" | wc -l
      retcode: 0
      stdout: "4"
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CRONJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "schedule" | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CRONJOBNAME}2" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""

#
# continuous job
#

- name: "create continuous job"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "create duplicated continuous job should fail"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "\"HTTP 409: a job with the same name exists already\""
      stderr: ""

- name: "show continuous job, all fields are present"
  tests:
    - cmd: |
            response=$(curl -s ${CURL_URL}/show/${CONTJOBNAME} -H "${CURL_HDR}" ${CURL_ARGS})
            echo "$response" | grep -q '"name": "${CONTJOBNAME}"' \
            && echo "$response" | grep -q '"cmd": "true"' \
            && echo "$response" | grep -q '"image": "${IMG}"' \
            && echo "$response" | grep -q '"user": "test"' \
            && echo "$response" | grep -q '"filelog": "False"' \
            && echo "$response" | grep -q '"namespace": "tool-test"' \
            && echo "$response" | grep -q "status_short" \
            && echo "$response" | grep -q "status_long" \
            && echo "$response" | grep -q '"emails": "none"' \
            && echo "$response" | grep -q '"continuous": true'
      retcode: 0
      stdout: ""
      stderr: ""

- name: "list jobs, only continuous job is present"
  tests:
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep continuous | grep -q true
      retcode: 0
      stdout: ""
      stderr: ""
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep status_short | wc -l
      retcode: 0
      stdout: "1"
      stderr: ""

- name: "delete continuous job"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CONTJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "show continuous job should fail because we just deleted it"
  tests:
    - cmd: curl -s ${CURL_URL}/show/${CONTJOBNAME} -H "${CURL_HDR}" ${CURL_ARGS} -f
      # this means the server returned 404
      retcode: 22
      stdout: ""
      stderr: ""

- name: "create 2 continuous jobs and delete one by one"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}2" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "namespace" | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CONTJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep "namespace" | wc -l
      retcode: 0
      stdout: "1"
      stderr: ""
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CONTJOBNAME}2" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""

#
# mixed cronjob/normaljob/continuousjob
#

- name: "create all 3 types of jobs"
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "schedule=*/5 * * * *"
      retcode: 0
      stdout: "201"
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "list jobs, all 3 types are present"
  tests:
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep status_short | wc -l
      retcode: 0
      stdout: "3"
      stderr: ""
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep -q schedule
      retcode: 0
      stdout: ""
      stderr: ""
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep -q continuous
      retcode: 0
      stdout: ""
      stderr: ""

- name: "delete cronjob, make sure it doesn't remove the others"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CRONJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep namespace | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""
    # create again the cronjob to do the reverse test
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CRONJOBNAME}" -d "imagename=${IMG}" -d "cmd=true" -d "schedule=*/5 * * * *"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "delete normaljob, make sure it doesn't remove the others"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${JOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep namespace | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""
    # create again the normaljob to continue with tests
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${JOBNAME}" -d "imagename=${IMG}" -d "cmd=${SLEEP_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}

- name: "delete continuousjob, make sure it doesn't remove the others"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/delete/"${CONTJOBNAME}" -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS} | json_pp | grep namespace | wc -l
      retcode: 0
      stdout: "2"
      stderr: ""

#
# commands, filelogs, etc
#
- name: job should use default logging method
  tests:
    # create a dummy script that logs something
    - cmd: |
            cat << EOF > ${TOOLHOME}/${LOG_JOB_CMD}
            #!/bin/sh
            echo canary
            echo error-canary >&2
            EOF
    - cmd: chmod a+x ${TOOLHOME}/${LOG_JOB_CMD}
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${LOG_JOB}" -d "imagename=${IMG}" -d "cmd=./${LOG_JOB_CMD}" -d "filelog=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # wait for the job to run
    - cmd: sleep ${SLEEP}
    # verify that canary string has been logged to output log
    - cmd: grep -q "canary" ${TOOLHOME}/${LOG_JOB}.out
      retcode: 0
    # verify that error-canary string has been logged to error log
    - cmd: grep -q "error-canary" ${TOOLHOME}/${LOG_JOB}.err
      retcode: 0

- name: job should not produce logs
  tests:
    # verify that a job that uses no_logfile doesn't log
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${LOG_JOB}4" -d "imagename=${IMG}" -d "cmd=./${LOG_JOB_CMD}"
      retcode: 0
      stdout: "201"
      stderr: ""
    # wait for the job to run
    - cmd: sleep ${SLEEP}
    # verify the logfiles weren't created
    - cmd: ls ${TOOLHOME}/${LOG_JOB}4.out
      retcode: 2
    - cmd: ls ${TOOLHOME}/${LOG_JOB}4.err
      retcode: 2

#
# quota errors
#
- name: quota error reporting
  tests:
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}1" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}2" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}3" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 0
      stdout: "201"
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    # quota for continuous jobs created in faketoolforge is 3, this should fail
    - cmd: curl --fail-with-body -s -X POST ${CURL_URL}/run/ -H "${CURL_HDR}" ${CURL_ARGS} -d "name=${CONTJOBNAME}4" -d "imagename=${IMG}" -d "cmd=true" -d "continuous=true"
      retcode: 22
      stdout: >-
        "HTTP 403: out of quota for this kind of job. Please check https://wikitech.wikimedia.org/wiki/Help:Toolforge/Jobs_framework#Job_quotas"
      stderr: ""

#
# cleanup
#
- name: "flush operation all jobs"
  tests:
    - cmd: curl -s -X DELETE ${CURL_URL}/flush/ -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "\"\""
      stderr: ""
    # give k8s a chance to do its thing
    - cmd: sleep ${SLEEP}
    - cmd: curl -s ${CURL_URL}/list/ -H "${CURL_HDR}" ${CURL_ARGS}
      retcode: 0
      stdout: "[]"
      stderr: ""
    # give k8s a chance to do its thing. Pods in terminating state can take a long time to go away
    - cmd: |
            sleep ${SLEEP}
            sleep ${SLEEP}
            sleep ${SLEEP}
            sleep ${SLEEP}
            sleep ${SLEEP}
    - cmd: kubectl ${KUBECTL_ARGS} get all
      retcode: 0
      stdout: ""
      stderr: "No resources found in tool-test namespace."
